@page "/Account/Manage"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using PetAdoptionCenter.Data

@inject UserManager<PetAdoptionCenterUser> UserManager
@inject SignInManager<PetAdoptionCenterUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

<PageTitle>Manage Profile</PageTitle>

<style>
    body {
        font-family: 'Poppins', sans-serif;
        background-color: #F9F5F0;
        margin: 0;
        padding: 0;
    }

    .profile-container {
        max-width: 600px;
        margin: 60px auto;
        padding: 30px;
        background: #FFFFFF;
        border-radius: 12px;
        box-shadow: 0px 5px 15px rgba(0, 0, 0, 0.1);
        text-align: center;
    }

    h3 {
        color: #35455D;
        margin-bottom: 20px;
        font-weight: 600;
    }

    .form-floating {
        margin-bottom: 15px;
    }

    .form-control {
        border: 1px solid #92B1B6;
        background-color: #F8F9FA;
        color: #35455D;
        border-radius: 8px;
        padding: 12px;
    }

        .form-control:focus {
            border-color: #35455D;
            box-shadow: 0 0 5px rgba(53, 69, 93, 0.5);
        }

    label {
        color: #35455D;
        font-weight: 500;
    }

    .btn-primary {
        background: linear-gradient(90deg, #35455D, #5A7684);
        border: none;
        padding: 12px;
        font-size: 16px;
        border-radius: 8px;
        transition: all 0.3s ease-in-out;
    }

        .btn-primary:hover {
            background: #BFD1DF;
            color: #35455D;
            transform: scale(1.05);
        }

    .text-danger {
        color: #F26D5B;
    }

    .profile-card {
        display: flex;
        align-items: center;
        gap: 12px;
        margin-bottom: 20px;
    }

    .profile-icon {
        width: 50px;
        height: 50px;
        background-color: #92B1B6;
        color: white;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 24px;
        font-weight: bold;
    }

    .profile-info {
        text-align: left;
    }
</style>

<div class="profile-container">
    <div class="profile-card">
        <div class="profile-icon">👤</div>
        <div class="profile-info">
            <h3>Manage Profile</h3>
            <p class="text-muted">Update your contact details</p>
        </div>
    </div>

    <StatusMessage />

    <EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" role="alert" />

        <div class="form-floating">
            <input type="text" value="@username" class="form-control" placeholder="Username" disabled />
            <label for="username" class="form-label">Username</label>
        </div>

        <div class="form-floating">
            <InputText @bind-Value="Input.PhoneNumber" class="form-control" placeholder="Enter your phone number" />
            <label for="phone-number" class="form-label">Phone Number</label>
            <ValidationMessage For="() => Input.PhoneNumber" class="text-danger" />
        </div>

        <button type="submit" class="w-100 btn btn-lg btn-primary">Save Changes</button>
    </EditForm>
</div>

@code {
    private PetAdoptionCenterUser user = default!;
    private string? username;
    private string? phoneNumber;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        username = await UserManager.GetUserNameAsync(user);
        phoneNumber = await UserManager.GetPhoneNumberAsync(user);

        Input.PhoneNumber ??= phoneNumber;
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.PhoneNumber != phoneNumber)
        {
            var setPhoneResult = await UserManager.SetPhoneNumberAsync(user, Input.PhoneNumber);
            if (!setPhoneResult.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to set phone number.", HttpContext);
            }
        }

        await SignInManager.RefreshSignInAsync(user);
        RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated", HttpContext);
    }

    private sealed class InputModel
    {
        [Phone]
        [Display(Name = "Phone number")]
        public string? PhoneNumber { get; set; }
    }
}
