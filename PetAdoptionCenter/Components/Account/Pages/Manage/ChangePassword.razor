@page "/Account/Manage/ChangePassword"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using PetAdoptionCenter.Data

@inject UserManager<PetAdoptionCenterUser> UserManager
@inject SignInManager<PetAdoptionCenterUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ChangePassword> Logger

<PageTitle>Change Password</PageTitle>

<style>
    body {
        font-family: 'Poppins', sans-serif;
        background-color: #F9F5F0;
        margin: 0;
        padding: 0;
    }

    .password-container {
        max-width: 600px;
        margin: 60px auto;
        padding: 30px;
        background: #FFFFFF;
        border-radius: 12px;
        box-shadow: 0px 5px 15px rgba(0, 0, 0, 0.1);
        text-align: center;
    }

    h3 {
        color: #35455D;
        margin-bottom: 20px;
        font-weight: 600;
    }

    .form-floating {
        margin-bottom: 15px;
    }

    .form-control {
        border: 1px solid #92B1B6;
        background-color: #F8F9FA;
        color: #35455D;
        border-radius: 8px;
        padding: 12px;
    }

        .form-control:focus {
            border-color: #35455D;
            box-shadow: 0 0 5px rgba(53, 69, 93, 0.5);
        }

    label {
        color: #35455D;
        font-weight: 500;
    }

    .btn-primary {
        background: linear-gradient(90deg, #35455D, #5A7684);
        border: none;
        padding: 12px;
        font-size: 16px;
        border-radius: 8px;
        transition: all 0.3s ease-in-out;
    }

        .btn-primary:hover {
            background: #BFD1DF;
            color: #35455D;
            transform: scale(1.05);
        }

    .text-danger {
        color: #F26D5B;
    }

    .password-card {
        display: flex;
        align-items: center;
        gap: 12px;
        margin-bottom: 20px;
    }

    .password-icon {
        width: 50px;
        height: 50px;
        background-color: #92B1B6;
        color: white;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 24px;
        font-weight: bold;
    }

    .password-info {
        text-align: left;
    }

    .toggle-password {
        cursor: pointer;
        position: absolute;
        right: 10px;
        top: 50%;
        transform: translateY(-50%);
        color: #35455D;
    }
</style>

<div class="password-container">
    <div class="password-card">
        <div class="password-icon">🔑</div>
        <div class="password-info">
            <h3>Change Password</h3>
            <p class="text-muted">Update your account security</p>
        </div>
    </div>

    <StatusMessage Message="@message" />

    <EditForm Model="Input" FormName="change-password" OnValidSubmit="OnValidSubmitAsync" method="post">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" role="alert" />

        <div class="form-floating position-relative">
            <InputText type="password" @bind-Value="Input.OldPassword" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Enter old password" />
            <label for="old-password" class="form-label">Old Password</label>
            <span class="toggle-password" onclick="togglePassword('old-password')">👁️</span>
            <ValidationMessage For="() => Input.OldPassword" class="text-danger" />
        </div>

        <div class="form-floating position-relative">
            <InputText type="password" @bind-Value="Input.NewPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Enter new password" />
            <label for="new-password" class="form-label">New Password</label>
            <span class="toggle-password" onclick="togglePassword('new-password')">👁️</span>
            <ValidationMessage For="() => Input.NewPassword" class="text-danger" />
        </div>

        <div class="form-floating position-relative">
            <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Confirm new password" />
            <label for="confirm-password" class="form-label">Confirm Password</label>
            <span class="toggle-password" onclick="togglePassword('confirm-password')">👁️</span>
            <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
        </div>

        <button type="submit" class="w-100 btn btn-lg btn-primary">Update Password</button>
    </EditForm>
</div>

<script>
    function togglePassword(fieldId) {
        var field = document.getElementById(fieldId);
        if (field.type === "password") {
            field.type = "text";
        } else {
            field.type = "password";
        }
    }
</script>

@code {
    private string? message;
    private PetAdoptionCenterUser user = default!;
    private bool hasPassword;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        hasPassword = await UserManager.HasPasswordAsync(user);
        if (!hasPassword)
        {
            RedirectManager.RedirectTo("Account/Manage/SetPassword");
        }
    }

    private async Task OnValidSubmitAsync()
    {
        var changePasswordResult = await UserManager.ChangePasswordAsync(user, Input.OldPassword, Input.NewPassword);
        if (!changePasswordResult.Succeeded)
        {
            message = $"Error: {string.Join(",", changePasswordResult.Errors.Select(error => error.Description))}";
            return;
        }

        await SignInManager.RefreshSignInAsync(user);
        Logger.LogInformation("User changed their password successfully.");

        RedirectManager.RedirectToCurrentPageWithStatus("Your password has been changed", HttpContext);
    }

    private sealed class InputModel
    {
        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Current password")]
        public string OldPassword { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The password must be at least {2} and at most {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "New password")]
        public string NewPassword { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm new password")]
        [Compare("NewPassword", ErrorMessage = "The new password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
