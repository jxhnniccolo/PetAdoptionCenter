@page "/Account/Manage/Email"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using PetAdoptionCenter.Data

@inject UserManager<PetAdoptionCenterUser> UserManager
@inject IEmailSender<PetAdoptionCenterUser> EmailSender
@inject IdentityUserAccessor UserAccessor
@inject NavigationManager NavigationManager

<PageTitle>Manage Email</PageTitle>

<style>
    body {
        font-family: 'Poppins', sans-serif;
        background-color: #F9F5F0;
        margin: 0;
        padding: 0;
    }

    .email-container {
        max-width: 600px;
        margin: 60px auto;
        padding: 30px;
        background: #FFFFFF;
        border-radius: 12px;
        box-shadow: 0px 5px 15px rgba(0, 0, 0, 0.1);
        text-align: center;
    }

    h3 {
        color: #35455D;
        margin-bottom: 20px;
        font-weight: 600;
    }

    .form-floating {
        margin-bottom: 15px;
    }

    .form-control {
        border: 1px solid #92B1B6;
        background-color: #F8F9FA;
        color: #35455D;
        border-radius: 8px;
        padding: 12px;
    }

        .form-control:focus {
            border-color: #35455D;
            box-shadow: 0 0 5px rgba(53, 69, 93, 0.5);
        }

    label {
        color: #35455D;
        font-weight: 500;
    }

    .btn-primary {
        background: linear-gradient(90deg, #35455D, #5A7684);
        border: none;
        padding: 12px;
        font-size: 16px;
        border-radius: 8px;
        transition: all 0.3s ease-in-out;
    }

        .btn-primary:hover {
            background: #BFD1DF;
            color: #35455D;
            transform: scale(1.05);
        }

    .btn-link {
        font-size: 14px;
        color: #35455D;
        text-decoration: underline;
        cursor: pointer;
    }

        .btn-link:hover {
            color: #5A7684;
        }

    .text-danger {
        color: #F26D5B;
    }

    .email-card {
        display: flex;
        align-items: center;
        gap: 12px;
        margin-bottom: 20px;
    }

    .email-icon {
        width: 50px;
        height: 50px;
        background-color: #92B1B6;
        color: white;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 24px;
        font-weight: bold;
    }

    .email-info {
        text-align: left;
    }
</style>

<div class="email-container">
    <div class="email-card">
        <div class="email-icon">📧</div>
        <div class="email-info">
            <h3>Manage Email</h3>
            <p class="text-muted">Update your email address</p>
        </div>
    </div>

    <StatusMessage Message="@message" />

    <form @onsubmit="OnSendEmailVerificationAsync" id="send-verification-form" method="post">
        <AntiforgeryToken />
    </form>

    <EditForm Model="Input" FormName="change-email" OnValidSubmit="OnValidSubmitAsync" method="post">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" role="alert" />

        @if (isEmailConfirmed)
        {
            <div class="form-floating input-group">
                <input type="text" value="@email" class="form-control" placeholder="Email" disabled />
                <div class="input-group-append">
                    <span class="input-group-text text-success font-weight-bold">✔️ Verified</span>
                </div>
                <label for="email" class="form-label">Current Email</label>
            </div>
        }
        else
        {
            <div class="form-floating">
                <input type="text" value="@email" class="form-control" placeholder="Email" disabled />
                <label for="email" class="form-label">Current Email</label>
                <button type="submit" class="btn btn-link" form="send-verification-form">Send verification email</button>
            </div>
        }

        <div class="form-floating">
            <InputText @bind-Value="Input.NewEmail" class="form-control" autocomplete="email" aria-required="true" placeholder="Enter new email" />
            <label for="new-email" class="form-label">New Email</label>
            <ValidationMessage For="() => Input.NewEmail" class="text-danger" />
        </div>

        <button type="submit" class="w-100 btn btn-lg btn-primary">Change Email</button>
    </EditForm>
</div>

@code {
    private string? message;
    private PetAdoptionCenterUser user = default!;
    private string? email;
    private bool isEmailConfirmed;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm(FormName = "change-email")]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        email = await UserManager.GetEmailAsync(user);
        isEmailConfirmed = await UserManager.IsEmailConfirmedAsync(user);

        Input.NewEmail ??= email;
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.NewEmail is null || Input.NewEmail == email)
        {
            message = "Your email is unchanged.";
            return;
        }

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateChangeEmailTokenAsync(user, Input.NewEmail);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmailChange").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["email"] = Input.NewEmail, ["code"] = code });

        await EmailSender.SendConfirmationLinkAsync(user, Input.NewEmail, HtmlEncoder.Default.Encode(callbackUrl));

        message = "Confirmation link to change email sent. Please check your email.";
    }

    private async Task OnSendEmailVerificationAsync()
    {
        if (email is null)
        {
            return;
        }

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code });

        await EmailSender.SendConfirmationLinkAsync(user, email, HtmlEncoder.Default.Encode(callbackUrl));

        message = "Verification email sent. Please check your email.";
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "New email")]
        public string? NewEmail { get; set; }
    }
}
