@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using PetAdoptionCenter.Data

@inject SignInManager<PetAdoptionCenterUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<div class="login-container">
    <div class="login-card">
        <h2 class="text-center text-primary">🐶 Log in</h2>
        <StatusMessage Message="@errorMessage" />
        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="loginForm">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />

            <div class="mb-3">
                <label class="form-label">Email</label>
                <InputText @bind-Value="Input.Email" class="form-control rounded-3" placeholder="Enter your email" />
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>

            <div class="mb-3">
                <label class="form-label">Password</label>
                <InputText type="password" @bind-Value="Input.Password" class="form-control rounded-3" placeholder="Enter your password" />
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>

            <div class="form-check mb-3">
                <InputCheckbox @bind-Value="Input.RememberMe" class="form-check-input" />
                <label class="form-check-label"> Remember me </label>
            </div>

            <button type="submit" class="btn btn-primary w-100 rounded-pill shadow-sm">Log in</button>

            <div class="text-center mt-3">
                <a href="Account/ForgotPassword" class="text-primary text-decoration-none">Forgot password?</a>
            </div>
            <div class="text-center mt-1">
                <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))"
                   class="text-primary text-decoration-none">Sign up</a>
            </div>
        </EditForm>
    </div>
</div>

<section class="text-center mt-4">
    <h4 class="text-muted">Or Log in with</h4>
    <ExternalLoginPicker />
</section>

<style>
    /* Full-screen flexbox layout */
    .login-container {
        display: flex;
        align-items: center;
        justify-content: center;
        height: 100vh;
        width: 100vw;
        background: url('/Image/login-bg.jpg') center/cover no-repeat;
    }

    /* Login card with glass effect */
    .login-card {
        width: min(90%, 400px);
        background: rgba(255, 255, 255, 0.9);
        backdrop-filter: blur(8px);
        padding: 2rem;
        border-radius: 12px;
        box-shadow: 0px 4px 15px rgba(0, 0, 0, 0.2);
    }

    /* Hover effect on the login button */
    .btn-primary:hover {
        background-color: #0056b3;
        transform: scale(1.03);
        transition: 0.3s;
    }

    /* Input fields */
    .form-control {
        border: 2px solid #ced4da;
        transition: all 0.3s ease-in-out;
    }

        .form-control:focus {
            border-color: #007bff;
            box-shadow: 0 0 10px rgba(0, 123, 255, 0.3);
        }
</style>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo("Account/LoginWith2fa", new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
