@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using PetAdoptionCenter.Data

@inject SignInManager<PetAdoptionCenterUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<div class="login-container">
    <div class="login-card shadow-lg rounded p-4">
        <h2 class="text-center text-primary">🐶 Log in</h2>
        <p class="text-center text-muted">Access your account and continue helping animals!</p>
        <hr />

        <StatusMessage Message="@errorMessage" />

        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="loginForm">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />

            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" placeholder="name@example.com" />
                <label for="email">📧 Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" placeholder="Password" />
                <label for="password">🔑 Password</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>

            <div class="form-check mb-3">
                <InputCheckbox @bind-Value="Input.RememberMe" class="form-check-input" />
                <label class="form-check-label"> Remember me </label>
            </div>

            <button type="submit" class="w-100 btn btn-lg btn-primary mt-2">🐾 Log in</button>
        </EditForm>

        <p class="text-center mt-3">
            <a href="/Account/ForgotPassword" class="text-decoration-none text-primary">Forgot password?</a>
        </p>
        <p class="text-center mt-3">Don't have an account? <a href="/Account/Register" class="text-decoration-none">Register here</a></p>
    </div>

    <div class="login-card shadow-lg rounded p-4 mt-4">
        <h3 class="text-center text-secondary">🌐 Log in with Social Media</h3>
        <hr />
        <ExternalLoginPicker />
    </div>
</div>

<style>
    .login-container {
        max-width: 500px;
        margin: 3rem auto;
    }

    .login-card {
        background: white;
        border-radius: 10px;
        padding: 2rem;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

        .login-card:hover {
            transform: scale(1.02);
            box-shadow: 0px 10px 25px rgba(0, 0, 0, 0.15);
        }

    .btn-primary:hover {
        background-color: #0056b3;
        transform: scale(1.05);
    }

    .form-floating label {
        margin-left: 10px;
        font-size: 0.9rem;
        font-weight: 500;
    }

    .form-check-label {
        margin-left: 5px;
        font-size: 0.9rem;
        font-weight: 500;
    }
</style>




@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo("Account/LoginWith2fa", new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
