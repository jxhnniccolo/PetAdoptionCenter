@implements IDisposable
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Bring Me Home!</a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />
<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
            </NavLink>
        </div>

        <!-- Show Register and Login only when NOT logged in -->
        <AuthorizeView>
            <NotAuthorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Register">
                        <span class="bi bi-person-nav-menu" aria-hidden="true"></span> Register
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Login">
                        <span class="bi bi-person-badge-nav-menu" aria-hidden="true"></span> Login
                    </NavLink>
                </div>
            </NotAuthorized>
        </AuthorizeView>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="volunteerpage">
                <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Volunteer Page
            </NavLink>
        </div>

        <!-- Hide Adoption Application Page from Unauthorized Users -->
        <AuthorizeView>
            <Authorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="adoptionapplicationpage">
                        <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Adoption Application
                    </NavLink>
                </div>
            </Authorized>
        </AuthorizeView>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="petpage">
                <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Pet Page
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="aboutus">
                <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> About Us
            </NavLink>
        </div>

        <!-- Show Profile and Logout only when logged in -->
        <AuthorizeView>
            <Authorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Manage">
                        <span class="bi bi-person-fill-nav-menu" aria-hidden="true"></span> Profile
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <form action="Account/Logout" method="post">
                        <AntiforgeryToken />
                        <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                        <button type="submit" class="nav-link">
                            <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Logout
                        </button>
                    </form>
                </div>
            </Authorized>
        </AuthorizeView>
    </nav>
</div>

@code {
    private string? currentUrl;
    private bool isAuthenticated = false;

    protected override async Task OnInitializedAsync()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        isAuthenticated = authState.User.Identity?.IsAuthenticated == true;

        // Redirect unauthorized users if they try to access the adoption page directly
        if (!isAuthenticated && currentUrl.Contains("adoptionapplicationpage", StringComparison.OrdinalIgnoreCase))
        {
            NavigationManager.NavigateTo("Account/Login", forceLoad: true);
        }
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}
