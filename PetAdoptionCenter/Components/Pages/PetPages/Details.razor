@page "/pets/details"
@using Microsoft.EntityFrameworkCore
@using PetAdoptionCenter.Domain
@inject IDbContextFactory<PetAdoptionCenter.Data.PetAdoptionCenterContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>Pet</h2>
    <hr />
    @if (pet is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@pet.Name</dd>
            <dt class="col-sm-2">Species</dt>
            <dd class="col-sm-10">@pet.Species</dd>
            <dt class="col-sm-2">Breeed</dt>
            <dd class="col-sm-10">@pet.Breeed</dd>
            <dt class="col-sm-2">Age</dt>
            <dd class="col-sm-10">@pet.Age</dd>
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@pet.Description</dd>
            <dt class="col-sm-2">Added_by</dt>
            <dd class="col-sm-10">@pet.Added_by</dd>
            <dt class="col-sm-2">DateCreated</dt>
            <dd class="col-sm-10">@pet.DateCreated</dd>
            <dt class="col-sm-2">DateUpdated</dt>
            <dd class="col-sm-10">@pet.DateUpdated</dd>
            <dt class="col-sm-2">CreatedBy</dt>
            <dd class="col-sm-10">@pet.CreatedBy</dd>
            <dt class="col-sm-2">UpdatedBy</dt>
            <dd class="col-sm-10">@pet.UpdatedBy</dd>
        </dl>
        <div>
            <a href="@($"/pets/edit?id={pet.Id}")">Edit</a> |
            <a href="@($"/pets")">Back to List</a>
        </div>
    }
</div>

@code {
    private Pet? pet;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        pet = await context.Pet.FirstOrDefaultAsync(m => m.Id == Id);

        if (pet is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
