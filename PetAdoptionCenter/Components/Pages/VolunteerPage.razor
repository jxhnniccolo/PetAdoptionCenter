@page "/volunteerpage"
@rendermode InteractiveServer

@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.JSInterop
@using Microsoft.EntityFrameworkCore
@using PetAdoptionCenter.Domain
@inject IDbContextFactory<PetAdoptionCenterContext> DbFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JS

<PageTitle>Volunteer Page</PageTitle>

<header class="header py-5 text-white text-center">
    <h1>🐾 Become a Volunteer 🐾</h1>
    <p class="lead">Make a difference in the lives of animals today!</p>
    <nav class="nav justify-content-center mt-3">
        <NavLink href="/" class="nav-link text-white mx-3">Home</NavLink>
        <NavLink href="/petpage" class="nav-link text-white mx-3">Pet Page</NavLink>
        <NavLink href="/adoptionapplicationpage" class="nav-link text-white mx-3">Adoption Application</NavLink>
    </nav>
</header>

<section class="container my-5">
    <h3 class="text-center" style="color: #35455D;">🤝 Join Our Volunteer Team 🤝</h3>
    <p class="text-center" style="color: #92B1B6;">Help us make a difference in the lives of animals!</p>

    <div class="text-center my-4">
        <button class="btn shadow-lg rounded-pill" style="background-color: #F1C5AE; color: #35455D;" @onclick="ShowSignUpForm">✍ Sign Up to Volunteer</button>
    </div>

    @if (isSignUpFormVisible)
    {
        <div class="card p-4 shadow-lg rounded">
            <h4 class="text-center mb-3" style="color: #35455D;">Volunteer Sign-Up Form</h4>
            <div class="row">
                <div class="col-md-6 mb-3">
                    <label class="form-label" style="color: #35455D;">Name</label>
                    <input type="text" @bind="newVolunteer.Name" class="form-control" required />
                </div>
                <div class="col-md-6 mb-3">
                    <label class="form-label" style="color: #35455D;">Email</label>
                    <input type="email" @bind="newVolunteer.Email" class="form-control" required />
                </div>
                <div class="col-md-6 mb-3">
                    <label class="form-label" style="color: #35455D;">Phone Number</label>
                    <input type="text" @bind="newVolunteer.PhoneNumber" class="form-control" required />
                </div>
                <div class="col-md-6 mb-3">
                    <label class="form-label" style="color: #35455D;">Address</label>
                    <input type="text" @bind="newVolunteer.Address" class="form-control" required />
                </div>
            </div>
            <p class="text-muted text-center">⚠️ Your application will be reviewed by an admin before approval.</p>
            <div class="text-center">
                <button class="btn rounded-pill px-4 py-2" style="background-color: #92B1B6; color: white;" @onclick="AddVolunteer">Submit</button>
                <button class="btn btn-secondary rounded-pill px-4 py-2" @onclick="HideSignUpForm">Cancel</button>
            </div>
        </div>
    }

    @if (isAdmin)
    {
        <h3 class="text-center mt-5" style="color: #35455D;">👥 Pending Volunteer Applications</h3>

        @if (volunteers.Any(v => !v.IsApproved))
        {
            <div class="row mt-4">
                @foreach (var volunteer in volunteers.Where(v => !v.IsApproved))
                {
                    <div class="col-md-4 col-lg-3 mb-4">
                        <div class="card shadow-lg rounded">
                            <div class="card-body text-center">
                                <h4 class="card-title" style="color: #35455D;">@volunteer.Name</h4>
                                <p style="color: #92B1B6;"><strong>Email:</strong> @volunteer.Email</p>
                                <p style="color: #92B1B6;"><strong>Phone:</strong> @volunteer.PhoneNumber</p>
                                <p style="color: #92B1B6;"><strong>Address:</strong> @volunteer.Address</p>

                                <button class="btn btn-success rounded-pill px-3 py-2" @onclick="@(() => ApproveVolunteer(volunteer.Id))">✅ Approve</button>
                                <button class="btn btn-danger rounded-pill px-3 py-2 ms-2" @onclick="@(() => DeleteVolunteer(volunteer.Id))">❌ Reject</button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    }

    <h3 class="text-center mt-5" style="color: #35455D;">👥 Approved Volunteers</h3>

    @if (volunteers.Any(v => v.IsApproved))
    {
        <div class="row mt-4">
            @foreach (var volunteer in volunteers.Where(v => v.IsApproved))
            {
                <div class="col-md-4 col-lg-3 mb-4">
                    <div class="card shadow-lg rounded">
                        <div class="card-body text-center">
                            <h4 class="card-title" style="color: #35455D;">@volunteer.Name</h4>
                            <p style="color: #92B1B6;"><strong>Email:</strong> @volunteer.Email</p>
                            <p style="color: #92B1B6;"><strong>Phone:</strong> @volunteer.PhoneNumber</p>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</section>
<style>
    .header {
        background: linear-gradient(to right, #F1C5AE, #92B1B6);
    }

    .btn {
        font-size: 1rem;
        font-weight: bold;
        transition: all 0.3s ease;
    }

    .btn-success {
        background-color: #F1C5AE;
        color: #35455D;
    }

    .btn-danger {
        background-color: #E74C3C;
        color: white;
    }

    .card {
        background-color: #FFEFDB;
        box-shadow: 0px 5px 15px rgba(0, 0, 0, 0.1);
        border-radius: 10px;
    }

    .footer {
        background-color: #35455D;
        color: white;
    }

    .testimonial-card {
        background-color: #FFEFDB;
        border-radius: 10px;
    }
</style>

@code {
    private List<Volunteer> volunteers = new();
    private bool isAdmin = false;
    private bool isSignUpFormVisible = false;
    private Volunteer newVolunteer = new();

    protected override async Task OnInitializedAsync()
    {
        using var context = await DbFactory.CreateDbContextAsync();
        volunteers = await context.Volunteer.ToListAsync();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        isAdmin = user.Identity?.IsAuthenticated == true && user.Identity.Name == "admin@localhost.com";
    }

    private void ShowSignUpForm()
    {
        isSignUpFormVisible = true;
    }

    private void HideSignUpForm()
    {
        isSignUpFormVisible = false;
        newVolunteer = new();
    }

    private async Task AddVolunteer()
    {
        using var context = await DbFactory.CreateDbContextAsync();

        newVolunteer.DateCreated = DateTime.Now;
        newVolunteer.DateUpdated = DateTime.Now;
        newVolunteer.CreatedBy = "System";
        newVolunteer.UpdatedBy = "System";
        newVolunteer.IsApproved = false;

        context.Volunteer.Add(newVolunteer);
        await context.SaveChangesAsync();

        volunteers = await context.Volunteer.ToListAsync();
        isSignUpFormVisible = false;
        newVolunteer = new();
    }

    private async Task ApproveVolunteer(int volunteerId)
    {
        if (!isAdmin) return;

        using var context = await DbFactory.CreateDbContextAsync();
        var volunteer = await context.Volunteer.FindAsync(volunteerId);

        if (volunteer != null)
        {
            volunteer.IsApproved = true;
            await context.SaveChangesAsync();
            volunteers = await context.Volunteer.ToListAsync();
        }
    }

    private async Task DeleteVolunteer(int volunteerId)
    {
        if (!isAdmin) return;

        using var context = await DbFactory.CreateDbContextAsync();
        var volunteerToDelete = await context.Volunteer.FindAsync(volunteerId);

        if (volunteerToDelete != null)
        {
            context.Volunteer.Remove(volunteerToDelete);
            await context.SaveChangesAsync();
            volunteers = await context.Volunteer.ToListAsync();
        }
    }
}
