@page "/adoptionapplicationpage"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.JSInterop
@using Microsoft.EntityFrameworkCore
@using PetAdoptionCenter.Domain
@inject IDbContextFactory<PetAdoptionCenterContext> DbFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JS

<header class="header py-5 text-white text-center" style="background: linear-gradient(to right, #87CEFA, #4682B4);">
    <h1>🐾 Adoption Application 🐾</h1>
</header>

<section class="hero-section d-flex align-items-center justify-content-center text-center"
         style="background-color: #FFDAB9; min-height: 300px; position: relative; overflow: hidden;">
    <img src="Image/appli.png" alt="Adoption Banner"
         class="img-fluid position-absolute w-100 h-100" style="object-fit: cover; opacity: 0.4;">
    <div class="container position-relative text-white p-4" style="z-index: 1; background: rgba(0, 0, 0, 0.5); border-radius: 10px;">
        <h2>Give a Pet a Forever Home</h2>
        <p>
            Fill out the application form below, and our team will review your application shortly.
        </p>
    </div>
</section>

<section class="container my-5 p-4 rounded shadow-lg bg-light">
    <h3 class="text-center text-primary mb-4">Adoption Application Form</h3>

    <EditForm Model="@adoptionApplication" OnValidSubmit="HandleSubmit" FormName="AdoptionApplicationForm">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label for="email" class="form-label fw-bold">Email</label>
            <InputText id="email" class="form-control rounded-3" @bind-Value="adoptionApplication.Email" placeholder="Enter your email" />
            <ValidationMessage For="@(() => adoptionApplication.Email)" />
        </div>

        <div class="mb-3">
            <label for="applicationDate" class="form-label fw-bold">Application Date</label>
            <InputDate id="applicationDate" class="form-control rounded-3" @bind-Value="adoptionApplication.ApplicationDate" />
        </div>

        <div class="mb-3">
            <label for="petID" class="form-label fw-bold">Pet ID</label>
            <InputNumber id="petID" class="form-control rounded-3" @bind-Value="adoptionApplication.PetID" placeholder="Enter the Pet ID" />
        </div>

        <button type="submit" class="btn btn-primary w-100 rounded-pill shadow">
            Submit Application
        </button>
    </EditForm>
</section>

@if (isAdmin)
{
    <section class="container my-5 p-4 rounded shadow-lg bg-warning">
        <h3 class="text-center text-dark mb-4">Pending Adoption Applications</h3>

        @if (adoptionApplications == null || !adoptionApplications.Any(a => !a.IsDeleted))
        {
            <p class="text-center text-muted">No pending adoption applications.</p>
        }
        else
        {
            <table class="table table-striped">
                <thead class="table-dark">
                    <tr>
                        <th>ID</th>
                        <th>Approved</th>
                        <th>Application Date</th>
                        <th>Email</th>
                        <th>Pet ID</th>
                        <th>Processed By</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var application in adoptionApplications.Where(a => !a.IsDeleted))
                    {
                        <tr>
                            <td>@application.Id</td>
                            <td>@(application.IsApproved ? "✅ Approved" : "⏳ Pending")</td>
                            <td>@application.ApplicationDate?.ToString("yyyy-MM-dd")</td>
                            <td>@application.Email</td>
                            <td>@application.PetID</td>
                            <td>@application.ProcessedBy</td>
                            <td>
                                @if (!application.IsApproved)
                                {
                                    <button class="btn btn-success btn-sm me-2" @onclick="() => ApproveApplication(application.Id)">✅ Approve</button>
                                }
                                <button class="btn btn-danger btn-sm" @onclick="() => DeleteApplication(application.Id)">❌ Delete</button>

                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </section>
}

<footer class="footer py-4 text-white text-center" style="background: linear-gradient(to right, #4682B4, #1E3A5F);">
    <p>&copy; 2024 Pet Adoption Center. All rights reserved.</p>
    <nav>
        <a href="#" class="text-white text-decoration-none me-3">Privacy Policy</a>
        <a href="#" class="text-white text-decoration-none">Terms of Service</a>
    </nav>
</footer>

@code {
    private bool isAdmin = false;
    private List<AdoptionApplication> adoptionApplications = new();
    private AdoptionApplication adoptionApplication = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        isAdmin = user.Identity?.IsAuthenticated == true && user.Identity.Name == "admin@localhost.com";

        if (user.Identity?.IsAuthenticated == true)
        {
            adoptionApplication.Email = user.Identity.Name;
        }

        await LoadAdoptionApplications();
    }

    private async Task LoadAdoptionApplications()
    {
        using var context = await DbFactory.CreateDbContextAsync();
        adoptionApplications = await context.AdoptionApplication
            .Where(a => !a.IsDeleted) // Exclude deleted applications
            .ToListAsync();
    }

    private async Task HandleSubmit()
    {
        using var context = await DbFactory.CreateDbContextAsync();

        adoptionApplication.IsApproved = false; // Default to Pending
        adoptionApplication.IsDeleted = false; // Ensure application is not marked as deleted
        adoptionApplication.DateCreated = DateTime.Now;
        adoptionApplication.DateUpdated = DateTime.Now;
        adoptionApplication.CreatedBy = "System";
        adoptionApplication.UpdatedBy = "System";
        adoptionApplication.ApplicationDate ??= DateTime.Now;
        adoptionApplication.ProcessedBy = "System";

        context.AdoptionApplication.Add(adoptionApplication);
        await context.SaveChangesAsync();

        adoptionApplication = new();
        adoptionApplication.Email = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User.Identity?.Name;

        await LoadAdoptionApplications();
    }

    private async Task ApproveApplication(int applicationId)
    {
        await JS.InvokeVoidAsync("console.log", $"Approving Application ID: {applicationId}");

        using var context = await DbFactory.CreateDbContextAsync();
        var application = await context.AdoptionApplication.FindAsync(applicationId);

        if (application != null)
        {
            application.IsApproved = true;
            application.ProcessedBy = "admin@localhost.com";
            application.DateUpdated = DateTime.Now;

            context.AdoptionApplication.Update(application); // Ensure entity is tracked
            await context.SaveChangesAsync();

            adoptionApplications = await context.AdoptionApplication
                .Where(a => !a.IsDeleted) // Reload filtered list
                .ToListAsync();

            StateHasChanged();
        }
    }


    private async Task DeleteApplication(int applicationId)
    {
        await JS.InvokeVoidAsync("console.log", $"Deleting Application ID: {applicationId}");

        using var context = await DbFactory.CreateDbContextAsync();
        var applicationToDelete = await context.AdoptionApplication.FindAsync(applicationId);

        if (applicationToDelete != null)
        {
            applicationToDelete.IsDeleted = true; // Soft delete
            applicationToDelete.DateUpdated = DateTime.Now;

            context.AdoptionApplication.Update(applicationToDelete); // Ensure entity is tracked
            await context.SaveChangesAsync();

            adoptionApplications = await context.AdoptionApplication
                .Where(a => !a.IsDeleted) // Reload filtered list
                .ToListAsync();

            StateHasChanged();
        }
    }

}
