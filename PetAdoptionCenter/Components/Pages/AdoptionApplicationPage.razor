@page "/adoptionapplicationpage"
@rendermode InteractiveServer

@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.JSInterop
@using Microsoft.EntityFrameworkCore
@using PetAdoptionCenter.Domain
@inject IDbContextFactory<PetAdoptionCenterContext> DbFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JS
<PageTitle>Adoption Application</PageTitle>

<header class="header py-5 text-white text-center">
    <h1 class="display-4">🐾 Adoption Application 🐾</h1>
    <nav class="nav justify-content-center mt-3">
        <NavLink href="/" class="nav-link text-white mx-3">Home</NavLink>
        <NavLink href="/petpage" class="nav-link text-white mx-3">Pet Page</NavLink>
        <NavLink href="/volunteerpage" class="nav-link text-white mx-3">Volunteer Page</NavLink>
    </nav>
</header>

<section class="container my-5">
    @if (isAdmin)
    {
        <h3 class="text-center mb-4" style="color: #35455D;">📋 Pending Adoption Applications</h3>
        @if (applications == null || !applications.Any(a => !a.IsApproved && !a.IsDeleted))
        {
            <p class="text-center" style="color: #92B1B6;">🐾 No pending applications at the moment. 🐾</p>
        }
        else
        {
            <div class="row g-4">
                @foreach (var application in applications.Where(a => !a.IsApproved && !a.IsDeleted))
                {
                    <div class="col-md-6 col-lg-4">
                        <div class="card shadow-lg rounded overflow-hidden h-100" style="background-color: #FFEFDB;">
                            <div class="card-body text-center d-flex flex-column justify-content-between">
                                <h4 class="card-title" style="color: #35455D;">@application.Email</h4>
                                <p style="color: #92B1B6;"><strong>Pet ID:</strong> @application.PetID</p>
                                <p style="color: #92B1B6;"><strong>Date:</strong> @application.ApplicationDate?.ToString("yyyy-MM-dd")</p>
                                <div class="mt-3">
                                    <button class="btn rounded-pill mb-2 w-100" style="background-color: #81B29A; color: white;" @onclick="() => ApproveApplication(application.Id)">✅ Approve</button>
                                    <button class="btn rounded-pill w-100" style="background-color: #E07A5F; color: white;" @onclick="() => DeleteApplication(application.Id)">❌ Reject</button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }

        <h3 class="text-center mt-5 mb-4" style="color: #35455D;">✔️ Approved Applications</h3>
        <div class="row g-4">
            @foreach (var application in applications.Where(a => a.IsApproved))
            {
                <div class="col-md-6 col-lg-4">
                    <div class="card shadow-lg rounded overflow-hidden h-100" style="background-color: #FFEFDB;">
                        <div class="card-body text-center d-flex flex-column justify-content-between">
                            <h4 class="card-title" style="color: #35455D;">@application.Email</h4>
                            <p style="color: #92B1B6;"><strong>Pet ID:</strong> @application.PetID</p>
                            <p style="color: #92B1B6;"><strong>Processed By:</strong> @application.ProcessedBy</p>
                            <div class="mt-3">
                                <button class="btn rounded-pill w-100" style="background-color: #E07A5F; color: white;" @onclick="() => RevokeApproval(application.Id)">↩ Revoke Approval</button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <h3 class="text-center mb-4" style="color: #35455D;">🐾 Adoption Application Form</h3>
        <div class="card p-4 shadow-lg rounded" style="background-color: #FFEFDB;">
            <div class="mb-4">
                <label class="form-label" style="color: #35455D;">Email</label>
                <input type="email" @bind="newApplication.Email" class="form-control" />
            </div>
            <div class="mb-4">
                <label class="form-label" style="color: #35455D;">Pet ID</label>
                <input type="number" @bind="newApplication.PetID" class="form-control" />
            </div>
            <p class="text-center" style="color: #35455D;">⚠️ Your application will be reviewed by an admin.</p>
            <div class="text-center mt-4">
                <button class="btn rounded-pill px-4 py-2" style="background-color: #81B29A; color: white;" @onclick="SubmitApplication">Submit</button>
            </div>
        </div>

        <h3 class="text-center mt-5 mb-4" style="color: #35455D;">✔️ Your Applications</h3>
        <div class="row g-4">
            @if (userApplications == null || !userApplications.Any())
            {
                <p class="text-center" style="color: #92B1B6;">🐾 No applications found. Please submit one. 🐾</p>
            }
            else
            {
                @foreach (var application in userApplications)
                {
                    <div class="col-md-6 col-lg-4">
                        <div class="card shadow-lg rounded overflow-hidden h-100" style="background-color: #FFEFDB;">
                            <div class="card-body text-center d-flex flex-column justify-content-between">
                                <h4 class="card-title" style="color: #35455D;">Pet ID: @application.PetID</h4>
                                <p style="color: #92B1B6;">Date: @application.ApplicationDate?.ToString("yyyy-MM-dd")</p>
                                <p style="color: #35455D;">
                                    Status:
                                    @if (application.IsDeleted)
                                    {
                                        <span style="color: #E07A5F;">Rejected</span>
                                    }
                                    else if (application.IsApproved)
                                    {
                                        <span style="color: #81B29A;">Approved</span>
                                    }
                                    else
                                    {
                                        <span style="color: #F1C5AE;">Pending</span>
                                    }
                                </p>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    }
</section>

<footer class="footer py-4 text-center">
    <div class="container">
        <p>&copy; 2025 Bring Me Home! All rights reserved.</p>
        <nav>
            <a href="#" class="text-white text-decoration-none me-3">Privacy Policy</a>
            <a href="#" class="text-white text-decoration-none">Terms of Service</a>
        </nav>
    </div>
</footer>

<style>
    /* Header Styling */
    .header {
        background: linear-gradient(to right, #BFD1DF, #CED2C2);
        padding: 60px 0;
    }

    /* Card Styling */
    .card {
        border-radius: 12px;
        box-shadow: 0px 8px 16px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        background-color: #FFF5E1;
        padding: 20px;
    }

        .card:hover {
            transform: translateY(-3px);
            box-shadow: 0px 12px 20px rgba(0, 0, 0, 0.15);
        }

    /* Buttons */
    .btn {
        font-weight: bold;
        transition: all 0.3s ease;
        border-radius: 50px;
        padding: 12px 20px;
    }

    .btn-approve {
        background-color: #3A7D44;
        color: white;
    }

        .btn-approve:hover {
            background-color: #2E5F32;
        }

    .btn-reject {
        background-color: #D9534F;
        color: white;
    }

        .btn-reject:hover {
            background-color: #B52B27;
        }

    .btn-revoke {
        background-color: #FFB997;
        color: white;
    }

        .btn-revoke:hover {
            background-color: #E0987A;
        }

    .btn-submit {
        background-color: #FF7E67;
        color: white;
    }

        .btn-submit:hover {
            background-color: #E65A47;
        }

    /* Form Container */
    .form-container {
        background-color: #FFF5E1;
        padding: 40px;
        max-width: 600px;
        margin: auto;
        border-radius: 12px;
        box-shadow: 0px 8px 16px rgba(0, 0, 0, 0.1);
    }

    /* Form Fields */
    .form-control {
        border: 2px solid #E07A5F;
        border-radius: 8px;
        padding: 14px;
        font-size: 16px;
    }

    /* Footer */
    .footer {
        background-color: #35455D;
        color: white;
        padding: 20px 0;
        text-align: center;
    }

        .footer a {
            color: white;
            text-decoration: none;
        }

            .footer a:hover {
                text-decoration: underline;
            }

    /* Text Styling */
    h3 {
        color: #35455D;
        font-weight: bold;
        margin-bottom: 20px;
    }

    .text-muted {
        color: #7E898A !important;
    }

    /* Spacing & Alignment */
    .row.g-4 > .col-md-6 {
        display: flex;
        justify-content: center;
    }

    .card-body {
        display: flex;
        flex-direction: column;
        gap: 12px;
    }

    /* Pending & Approved Applications */
    .application-card {
        border-radius: 15px;
        padding: 20px;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        background-color: #FFF5E1;
    }

        .application-card:hover {
            transform: scale(1.02);
            box-shadow: 0px 12px 18px rgba(0, 0, 0, 0.15);
        }
</style>


@code {
    private List<AdoptionApplication> applications = new();
    private List<AdoptionApplication> userApplications = new();
    private bool isAdmin = false;
    private AdoptionApplication newApplication = new() { ApplicationDate = DateTime.Now };
    private string? userEmail;

    protected override async Task OnInitializedAsync()
    {
        using var context = await DbFactory.CreateDbContextAsync();
        applications = await context.AdoptionApplication.ToListAsync();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        userEmail = user.Identity?.Name;
        isAdmin = userEmail == "admin@localhost.com";
        if (!isAdmin && userEmail != null)
        {
            userApplications = applications.Where(a => a.Email == userEmail).ToList();
        }
    }

    private async Task ApproveApplication(int applicationId)
    {
        using var context = await DbFactory.CreateDbContextAsync();
        var application = await context.AdoptionApplication.FindAsync(applicationId);
        if (application != null)
        {
            application.IsApproved = true;
            application.ProcessedBy = userEmail;
            await context.SaveChangesAsync();
            applications = await context.AdoptionApplication.ToListAsync();
            userApplications = applications.Where(a => a.Email == userEmail).ToList();
        }
    }

    private async Task DeleteApplication(int applicationId)
    {
        using var context = await DbFactory.CreateDbContextAsync();
        var application = await context.AdoptionApplication.FindAsync(applicationId);
        if (application != null)
        {
            application.IsDeleted = true;
            await context.SaveChangesAsync();
            applications = await context.AdoptionApplication.ToListAsync();
            userApplications = applications.Where(a => a.Email == userEmail).ToList();
        }
    }

    private async Task RevokeApproval(int applicationId)
    {
        using var context = await DbFactory.CreateDbContextAsync();
        var application = await context.AdoptionApplication.FindAsync(applicationId);
        if (application != null)
        {
            application.IsApproved = false;
            await context.SaveChangesAsync();
            applications = await context.AdoptionApplication.ToListAsync();
            userApplications = applications.Where(a => a.Email == userEmail).ToList();
        }
    }

    private async Task SubmitApplication()
    {
        using var context = await DbFactory.CreateDbContextAsync();
        newApplication.IsApproved = false;
        newApplication.IsDeleted = false;
        newApplication.ProcessedBy = null;
        context.AdoptionApplication.Add(newApplication);
        await context.SaveChangesAsync();
        userApplications.Add(newApplication);
    }
}
