@page "/volunteers/details"
@using Microsoft.EntityFrameworkCore
@using PetAdoptionCenter.Domain
@inject IDbContextFactory<PetAdoptionCenter.Data.PetAdoptionCenterContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>Volunteer</h2>
    <hr />
    @if (volunteer is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@volunteer.Name</dd>
            <dt class="col-sm-2">Email</dt>
            <dd class="col-sm-10">@volunteer.Email</dd>
            <dt class="col-sm-2">PhoneNumber</dt>
            <dd class="col-sm-10">@volunteer.PhoneNumber</dd>
            <dt class="col-sm-2">Address</dt>
            <dd class="col-sm-10">@volunteer.Address</dd>
            <dt class="col-sm-2">Status</dt>
            <dd class="col-sm-10">@volunteer.Status</dd>
            <dt class="col-sm-2">DateCreated</dt>
            <dd class="col-sm-10">@volunteer.DateCreated</dd>
            <dt class="col-sm-2">DateUpdated</dt>
            <dd class="col-sm-10">@volunteer.DateUpdated</dd>
            <dt class="col-sm-2">CreatedBy</dt>
            <dd class="col-sm-10">@volunteer.CreatedBy</dd>
            <dt class="col-sm-2">UpdatedBy</dt>
            <dd class="col-sm-10">@volunteer.UpdatedBy</dd>
        </dl>
        <div>
            <a href="@($"/volunteers/edit?id={volunteer.Id}")">Edit</a> |
            <a href="@($"/volunteers")">Back to List</a>
        </div>
    }
</div>

@code {
    private Volunteer? volunteer;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        volunteer = await context.Volunteer.FirstOrDefaultAsync(m => m.Id == Id);

        if (volunteer is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
